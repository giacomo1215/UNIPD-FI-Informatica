[2023-10-24]

# Sequenze di escape
- Se noi cerchiamo di stampare una string che contenga delle virgolette, semplicemente inserire le virgolette non funziona
- Il compilatore identifica le seconde virgolette come la fine della prima stringa
- Basta inserire un backslash prima delle virgolette all'interno della stringa.
    [java]
        System.out.println("Hello, "World"!");   // non funziona
        System.out.println("Hello, \"World\"!"); // funziona
    [/java]
- Il carattere backslash all'interno di una stringa non rappresenta se stesso, ma si usa per codificare altri caratteri che non si riesce ad includere facilmente in una stringa, a causa delle sequenze di escape. 
- Se devo inserire un backslash dentro la stringa, devo usare la sequenza di escape "\\". 
    [java]
        System.out.printlm("File C:\\test.exe"); // Il path vien fuori corretto "C:\test.exe
    [/java]
- Altra sequenza di escape comune è \n, per rappresentare il carattere di "new line"
- Le sequenze di escape si usano anche per inserire caratteri di lingue straniere o simboli che non si trovano sulla tastiera.

# Utilizzo di Classi e Oggetti
- Elaborando numeri e caratteri si possono scrivere programmi interessanti, ma programmi più utili hanno bisogno di manipolare dati più complessi
    - numeri complessi, conti bancari, dati anagrafici, forme grafiche, file audio, ecc
- Il linguaggio Java gestisce questi dati complessi sotto forma di Oggetti
- Gli oggetti e il loro comportamento vengono descritti mediante le Classi e i loro Metodi

    ## Programmazione ad oggetti
    - Paradigma di programmazione
        - Insieme di strumenti concettuali che cartterizzano un linguaggio di programmazione
    - Nella programmazione ad oggetti si utilizzano le classi come "fabbriche di oggetti"
    - Una classe: 
        a. Contiene dati e emtodi la cui realizzazione non è necessariamente nota
        b. Permette acecsso e/o modifica di dati tramite la sua interfaccia pubblica
            i. Incapsulamento: diversi livelli di astrazione

        ### Oggetti
        - Un oggetto è un'entità che può essere manipolata in un programma mediante l'invocazione di metodi 
        - Metodi: sequenze di istruzioni che possono accedere ai dati interni dell'oggetto
        - Immaginiamo un oggetto come una "scatola nera" dotata di: 
            a. un'interfaccia pubblica (insieme dei metodi che si possono utilizzare), che definisce il comportamento dell'oggetto
            b. una realizzazione (o implementazione) nascosta (dentro la "scatola": il codice dei metodi e i loro dati)

        ### Classi
        - Una classe è una fabbrica di oggetti o, meglio, uno schema di progetto per la costruzione di oggetti.
            - gli oggetti che si creano sono esemplari (o "istanze", instance) di una classe
        - specifica i metodi che si possono invocare con gli oggetti che sono esemplari di tale classe (l'interfaccia pubblica)
        - definisce i dettagli della realizzazione dei metodi (codice e dati)
        - è anche un contenitore di
            a. metodi statici (Hello contiene main)
            b. variabili statiche (System contiene out)

- Usare oggetti che siano istanze di una classe e realizzare una classe sono due attività ben distinte!

# Interfaccia pubblica
- L'interfaccia pubblica di una classe descrive i metodi che possono essere invocati da oggetti "fabbricati da quella classe (anche detti istanze o esemplari della classe)
- Per esempio, alcuni metodi della classe String sono: 
    a. length() che restituisce la lunghezza della stringa
    b. toUpperCase() che restituisce la stringa con tutte le lettere minuscole trasformate in maiuscolo

# definizione / inizializzazione di una variabile oggetto di tipo string
- per invocare un metodo di una classe che fabbrica oggetti (come String) devo prima creare un oggetto di quella classe e inizializzarlo
- per le stringhe posso dichiarare una variabile e usare l'assegnazione come si fa per i tipi primitivi 
    [java]
        String saluto = "Ciao, Mondo!"
    [/java]

# invocazione di metodi
- Per invocare un metodo della classe String, ad esempio length(), devo utilizzare una variabile di oggetto di tipo String che dica su che dati il metodo devo lavorare
    [java]
        nomeOggetto.nomeMetodo(parametri);
        
        String saluto = "Ciao, Mondo!"
        saluto.length();
    [/java]

# Metodi
- Se il metodo restituisce un valore di un certo tipo, posso assegnare questo valore ad una variabile di quello stesso tipo
    - ad esempio, length() restituisce un interno
    [java]
        String greeting = "Hello, World";
        int n = greeting.length();
    [/java]
    - ad esempio, toUpperCase() restituisce una stringa
    [java]
        String river = "Mississippi";
        String bigRiver = river.toUpperCase();
        System.out.println(bigRiver); // stampa MISSISSIPPI
    [/java]
- se il metodo restituisce un valore di un certo tipo, posso utilizzare questo valore come parametro esplicito di un altro metodo
- Istruzioni NON valide:
    !- con un oggetto che è un'istanza di una data classe posso invocare solo metodi messi a disposizione da quella classe
    !- out è un oggetto di tipo PrintStream. Questa classe non ha tra i suoi metodi il metodo length()

# Metodi: parametri espliciti/impliciti
- Alcuni metodi necessitano di valori di ingresso, o parametri espliciti, che specifichino i dati da elaborare
    [java]
        System.out.println(greeting);
    [/java]
    - greeting è un parametro esplicito: è la stringa che voglio stampare
    - i parametri espliciti sono quelli tra le parentesi
- Altri metodi no: tutte le info necessarie sono memorizzate nell'oggetto corrispondente, il parametro implicito
    [java]
        int n = greeting.length();
    [/java]
    - qui greeting è il parametro implicito: length viene calcolata sui dati contenuti nella variabile oggetto che invoca il metodo e perciò restituirà la lunghezza di "Hello, World!"

# Un metodo con parametri espliciti e parametro implicito
[java]
    public String replace(String oldStr, String newStr);
[/java]
- Il metodo replace della classe String riceve due parametri espliciti, entrambi stringhe, e cerca nella stringa descritta dal parametro implicito le occorrenze del primo parametro per sostituirle con il secondo. Restituisce la stringa ottenuta in un altro oggetto, senza modificare la stringa associata al parametro implicito.
    - questa è una caratteristica di tutti i metodi di String, ma non è vera per tutte le classi. Esistono metodi, detti modificatori, che modificano i dati interni alla classe.
[java]
    river.replace("issipp", "our");
[/java]
    - due parametri espliciti: le stringhe "issipp" e "our"
    - un parametro implicito: l'oggetto river (la stringa "Mississippi")
    - un valore restituito: la stringa "Missouri"
[java]
    System.out.println(river.replace("issipp", "our")); // Stampa Missouri
    System.out.println(river); // Stampa Mississippi
[/java]

# Definizioni di metodi: firma
?- come faccio a sapere se il metodo che voglio utilizzare ha dei parametri espliciti, di che tipo sono, e in che ordine li devo specificare?
?- come faccio a sapere che tipo di dato restituisce un metodo?

Queste informazioni sono contenute nella documentazione della classe, in quella che si chiama firma del metodo

[java]
    public String replace(String target, String replace); // String = tipo restituito | replace = nome metodo | (...,  ...) = Parametri espliciti
    public void println(String output);
    public String replace(String target, String replace);
[/java]

- La definizione di un metodo inizia con la sua intestazione (firma, signature):
    - uno specificatore di acecsso
        - indica quli altri metodi possono invocare il metodo 
            - un metodo "public" può essere invocato da qualsiasi altro metodo di qualsiasi altra classe
            - un metodo può essere anche private
    - il tipo di dati restituito dal metodo (String, void, int, ...)
    - il nome (identificatore) del metodo (println, replace, ...)
    - un elencto di parametri espliciti, eventualmente vuoto, tra parentesi tonde
        - di ogni parametro si indica il tipo ed il nome
        - più parametri sono separati da una virgola
- La dichiarazione di un metodo specifrica il tipo di dati restituito al termine della sua invocazione 
- Se un metodo non restituisce nessun valore si dichiara il tipo speciale void
    - il valore restituito, se assegnato, deve essere assegnato ad un tipo di dati corrispondente

// ---------------------------------------------------------------------------------------------------------------------------------------------------------

# Variabili oggetto
Una "variabile oggetto" conserva non l'oggetto stesso, ma informazioni sulla sua posizione nella memoria del computer. 
    * è detta anche "riferimento" o "puntatore"
Come già visto per oggetti della classe String, per definire una variabile oggetto si indica il nome della classe ai cui oggetti farà riferimento la variabile, seguito dal nome della variabile stessa
[java]
    NomeClasse nomeOggetto;
[/java]

    ## Costruire oggetti: l'operatore NEW
    - A differenza di quanto visto per gli oggetti della classe String, in generale per creare un nuovo oggetto di una classe si usa l'operatore "new" seguito dal nome della classe e da una coppia di parentesi tonde.
    [java]
        new NomeClasse(parametri);

        // Questa inizializzazione è valida anche per String, ma meno usata.
        String river = "Mississippi";
        String river = new String("Mississippi");
    [/java]
    - L'operatore "new" crea un nuovo oggetto e ne restituisce un riferimento, che può essere assegnato a una variabile oggetto del tipo appropriato.
    [java]
        NomeClasse nomeVar = new NomeClasse(parametri);
    [/java]

    ## Esempio: la classe Rectangle
    - Un rettangolo è descritto dalle coordinate (x,y) del suo vertice in alto a sinistra, e da larghezza e altezza
        - per creare un rettangolo bisogna
            - specificare x, y, width, height
            - invocare l'operatore New e il costruttore con i parametri richiesti
            - assegnare il rettangolo appena creato ad una variabile oggetto
            [java]
                Rectangle box = new Rectangle(5,10,20,30);
            [/java]

    ## Costruttori vs Metodi
    - Il processo di creazione di un nuovo oggetto è detto costruzione e ciò che segue l'operatore new è detto "costruttore"
    -! Un costruttore NON è un metodo
        - Ci assomiglia perché il nome è seguito dalle parentesi e pu avere dei parametri espliciti
        - il suo nome è uguale a quello della classe
            - però inizia con la maiuscola
        - non viene invocato da un parametro implicito
            - utilizzabile solo con "new"
        [java]
            Rectangle box = new Rectangle(5,10,20,30); // Corretto
            box.Rectangle(20,35,20,30)                 // ERRORE
        [/java]
            - ora box contiene un riferimento ad un oggetto che si trova in posizione x=20, y=35 e ha dimensioni di 20x20
    - Per vedere che metodi ha a disposizione un oggetto istanza della classe Rectangle basta cercare la classe nella documentazione java
[2023-10-12]
*------------------------------------------------------------*
| *** Rappresenzaione delle informazioni nei calcolatori *** |
*------------------------------------------------------------*

*** Obiettivi ***
- Bisogna imparare come vari tipi di dato vengono rappresentati all'interno del computer
    - Numeri naturali (interi senza segno)
        - Rappresentazione posizionale
    - Numeri interi
        - Rappresentazione modulo/segno
        - Rappresentazione in complemento a 2
    - Numeri reali
        - Rappresentazione a virgola fissa e mobile
    - Caratteri
        - ASCII e Unicode

*** Perche' e' importante studaire la rappresentazione dei dati ***
- Noi usiamo la notazione decimale per i numeri e dei simboli per le lettere
    - Il computer capisce 0-1
- I valori numerici sono infiniti
    - I Bit che il computer dedica alla rappresentazione dei numeri NON sono infiniti
        - Ci sono dei limiti alla rappresentazione dei valori numerici 
            - max/min valore rappresentazione
            - Precisione della rappresentazione
- I caratteri sono dei simboli, necessaria tabella di conversione

*-------------------------------*
| *** Notazione Posizionale *** |
*-------------------------------*

- I numeri che siamo abituati a utilizzare sono espressi
    - in base decimale perché usiamo dieci cifre diverse (da 0 a 9)
    - Con notazione posizionale perché cifre uguali in posizioni diverse hanno valore diverso
        - Il peso di una cifra è uguale alla base (10 in questo caso) elevata alla potenza della posizione della cifra 
            - La posizione si incrementa da destra a sinistra a partire da 0
- L'eventuale parte frazionaria, a destra del simbolo separatore, si valuta con potenze negative

*---------------------------*
| *** Notazione Binaria *** |
*---------------------------*

- I computer usano invece i numeri binari, cioè numeri rappresentati con notazione posizionale in base Binaria
    - la base binaria usa solo due cifre diverse, 0 e 1
        - in base X si usano le cifre da 0 a X-1
    - la conversione da base binaria a decimale è semplice
    
        (1101)sub2 = (1*1^3 + 1*1^2 + 0*2^1 + 1*2^0)sub10 = (13)sub10
        (1.01)sub2 = (1*1^0 + 1*1^-1 + 0*2^-2 + 1*2^-3)sub10 = (1.625)sub10

    - La rappresentazione binaria è più facile da manipolare per i computer per motivi tecnologici
        - perché è meno complicato costruire circuiti logici (digitali) che distinguono tra "acceso" e "spento".
- La conversione di un numero da base decimale a base binaria è, invece, un po' più complessa
- La parte intera del numero va elaborata indipendentemente dalla eventuale parte frazionaria.

*** Convertire la parte intera ***
- Per convertire la sola parte intera:
    - si divide il numero per 2
    - si elimina l'eventuale resto
    - si continua a dividere per 2 il quozioente ottenuto fino a quando non si ottiene quozioente uguale a 0
    - Il numero binario si ottiene scrivendo la sequenza dei resti delle divisioni, iniziando dall'ultimo resto ottenuto
    - ATTENZIONE: non fermarsi quando si ottiene quoziente 1, ma proseguire fino a 0.

        #CONVERTIRE LA PARTE INTERA ES. 100base10
        100    /    2    =    50 resto 0
        50     /    2    =    25 resto 0
        25     /    2    =    12 resto 1
        12     /    2    =    6  resto 0
        3      /    2    =    1  resto 1
        1      /    2    =    0  resto 1

        (100)base10      =    (110100)base2

*** Convertire la parte frazionaria ***

- Per convertire la sola parte frazionaria:
    - si moltiplica il numero per 2
    - si sottrae 1 dal prodotto se questo e' maggiore di 1
    - continuo fino a che il risultato e' uguale a 0 oppure e' un risultato gia' ottenuto
        - se si ottiene un risultato gia' ottenuto in precedenza, il numero sara' periodico, anche se non lo era in base decimale.
    - il numero binario si ottiene scrivendo la sequenza delle parti intere dei prodotti ottenuti, iniziando dal primo.

        #CONVERTIRE 0.35d
        0.35    *   2   =   0.7
        0.7     *   2   =   1.4
        0.4     *   2   =   0.8
        0.8     *   2   =   1.6
        0.6     *   2   =   1.2
        0.2     *   2   =   0.4
        (0.35)base10    =   (0.010110)base2

*** Rappresentazione in virgola fissa ***

- La rappresentazione completa si ottiene componendo la parte intera e quella frazionaria
- Rappresentazione in virgola fissa: il separatore si trova sempre nello stesso punto rispetto alla sequenza di bit.

    (100.35)base10  =  (110100.010110)base2


Abbiamo visto che per i numeri interi non negativi si usa la rappresentazione binaria posizionale.
    (101100)base2 = (44)base10
Se si usa una rappresentazione a n bit, si possono rappresentare i 2^n numeri naturali che sono compresi nell'intervallo [0, (2^n)-1] ∩ Z

- Con 8 cifre binarie (cioè 8 bit) si possono rappresentare 2^8 configurazioni, pari a 256 numeri diversi.

*** NUMERI INTERI RELATIVI ***
- Come possiamo rappresentare i numeri negativi?
    - la rappresentazione più "naturale" o intuitiva è quella con modulo e segno
        - si rappresenta il segno positivo o negativo del numero con il primo bit della sequenza (quello più a sinistra, ovvero il più significativo)
            - 0 rappresenta +
            - 1 rappresenta -
        - si rappresenta il modulo o valore assoluto del numero (che ovviamente è un numero non negativo)
            - utilizzando i restanti bit a disposizione
            - con la notazione binaria posizionale vista per i numeri non negativi
        - Esempio: rappresentazione usando 6 bit
            - 1 bit di segno
            - 5 bit destinati al valore assoluto del numero
                - il loro spazio viene riempito di zeri a sinistra, dopo il bit del segno, se serve
            
            (101100)2ms = (-12)base10
            (001100)2ms = (12)base10
        - se si usa una rappresentazione a n bit modulo/segno
            - si possono rappresentare (2^n)-1 numeri interi nell'intervallo
                [ -(2^(n-1) - 1) , 2^(n-1) - 1] ∩ Z 
        -  in pratica non si usa
            - problema: c'è una doppia rappresentazione per lo zero, per cui si "spreca" una configurazione
            - problema (più grave): l'algoritmo per l'addizione di numeri così rappresentati è complesso
    - Complemento a due
        - una rappresentazione più efficiente è quella denominata "complemento a 2", così definita
            - dato un numero intero relativo
                 a ∈ [-2^(n-1) , 2^(n-1)-1] ∩ Z
              la sua rappresentazione in complemento a due con n bit è

            C2(base n) (a) = - rappresentazione binaria di a con n bit se a ≥ 0
                             - rappresentazione binaria di (a+2^n) con n bit se a < 0
            
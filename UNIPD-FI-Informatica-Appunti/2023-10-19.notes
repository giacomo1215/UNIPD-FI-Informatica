[2023-10-19]

*** TIPI DI DATO IN JAVA ***
- Java è un linguaggio fortemente tipizzato e quindi ogni dato è di un ben preciso tipo noto al momento della compilazione del programma
- i tipi di dati in java possono essere:
    - tipi primitivi
        - tipologie semplici di dati
    - riferimenti ad un oggetto

# Dati primitivi
- Boolean
    - vero o falso
- Number
    - integer
        - byte
            - 1 byte
            - -128 a 127
            - variabile con segno che rappresenta valori in un range [-128 e 127] (estremi inclusi)
        - short
            - 2 byte
            - -32768 a 32767
            - numeri interi (con segno) in un range [-32768 a 32767]
        - int
            - 4 byte
            - -2*10^9 a 2*10^9 circa
            - numeri intero (per default con segno, signed) in un range[-2^31 a 2^31-1]
        - long
            - 8 byte
            - -10^20 a 10^20 circa
        - char
            - 2 byte
            - 0 a 65535 unicode
    - floating-point
        - float
            - precisione singola
            - +- 10^38 cifre significative
            - numeri in virgola mobile in singola precisione secondo la specifica IEEE754
        - double
            - precisione doppia
            - +- 10^308, 15 cifre significative

Una variabile "int" è rappresentata con 32 bit in complemento a 2. Quindi il massimo numero esprimibile è 2^31 - 1 = 2147483647.

# Valori Massimi e Minimi
- Se servono i valori massimi/minimi dei numeri rappresentati con i vari tipi di dati non occorre ricordarli
- il pacchetto java.lang della libreria standard contiene una classe per ciascun tipo di dati fondamentali, in cui sono definiti questi valori come costanti.

* ! OCIO ! *
!! In java tutti i tipi di dati fondamentali per numeri interi usano internamente la rappresentazione in complemento a due 
!! La JVM non segnala le condizioni di overflow nelle operazioni aritmetiche
!! L'unica operazione aritmetica tra numeri interi che genera una eccezione è la divisione con divisiore zero: "ArithmeticException"
!! Invece la divisione per zero un numero float/double si ottiene -/+ infinity
!! Quando l'intervallo di variabilità del tipo "int" non soddisfa le esigenze numeriche del problema, si usa il tipo long  
    - max valore assoluto con una variabile long: circa 9 miliardi di miliardi
    - per assegnare un valore a una variabile long bisogna aggiungere un carattere L alla fine (Java assume che le costanti numeriche siano interi)
        - long l = 123456789023424; ERRORE
        - long l = 123456789023424L; OK

# Variabili
- In Java ogni variabile ha
    - nome: identificativo che viene utilizzato per "usare" la variabile
    - tipo:
        - determina l'insieme dei valori amissibili (assegnabili)
        - determina l'occupazione in memoria
    - contenuto: valore associato
    - alcuni attributi: determinano la visibilità (public, protected, private) o specificano tipi particolari di variabili (static, final)
- sintassi: 
    nomeTipo nomeVariabile;
    nomeTipo nomeVariabile = espressione;
    - scopo: definire la nuova variabile "nomeVariabile", di tipo "nomeTipo", ed eventualmente assegnarle il valore iniziale "espressione".
    
    nomeVariabile = espressione;
    - scopo: assegnare il nuovo valore "espressione" alla variabile "nomeVariabile".

# Costante
- sintassi:
    final nomeTipo NOME_COSTANTE = espressione;
    - scopo: definire la costante "NOME_COSTANTE" di tipo "nomeTipo", assegnandole il valore espressione, che non potrà più essere modificato. 
        !!nota: il compilatore segnala come errore semantico il tentativo di assegnare un nuovo valore ad una costante, dopo la sua inizializzazione.


Di solito in Java si usa la seguente convenzione
    - i nomi di costanti sono formati da lettere maiuscole
    - i nomi composti si ottengono attaccando le parole successive alla prima con un carattere di sottolineatura

# Literals /1
I valori costanti (=literals) per i numeri sono interpretate da java come tipi int e double, a seconda che abbiamo o meno la parte frazionaria

- interi
    - se il valore ricade nell'intervallo di un tipo di dato meno capace (byte o short) all'ra l'assegnamento avviene senza problemi, altrimenti errore in compilazione
        
        [java]
        byte value1 = 10;       // OK
        byte value2 = 128;      // errore in compilazione
                                // max consentito 127

        short value3 = 200;     // OK
        short value4 = 33000;   // errore in compilazione
                                // max consentito 32767
        [/java]

    - se il valore è più grande del range del tipo "int", ma rientra nel range del tipo "long", devo esplicitare che si tratta di un valore long, aggiungendo "L" alla fine del numero

        [java]
        long l = 1345845486748064820L;       // OK
        long l = 1345845486748064820;        // errore in compilazione
        [/java]

- numeri in virgola mobile
    - anche se il valore ricade nell'intervallo del tipo float ho errore in compilazione
    - devo esplicitamente dire che il valore va interpretato come float per poterlo assegnare.. aggiungo f alla fine del numero
    - posso anche inizializzare un numero in virgola mobile con un valore intero.. in questo caso semplicemente la parte frazionaria corrisponderà a 0.
        
        [java]
        float f1 = 2.35;   // ERRORE
        float f2 = 2.35f;  // OK
        float f3 = 2;      // OK
        System.out.println(f3);  // stampa: 2.0
        [/java]
    
    !!nota: non ci sono solo valori costanti numerici. Anche le stringhe o i caratteri hanno "literals".

        [java]
        char c = 'A';
        String name = "Giacomo";
        [/java]

# Promozioni e casting
Può capitare di dover spostare dei valori numerici fra variabili di tipo diverso
    - se un valore contenuto in una variabile di un certo tipo deve essere assegnato ad una variabile di un tipo "più capace", ad esempio: 
        
        [java]
        byte b = 100;
        int i = b;
        // OK!!
        [/java]

    il compilatore esegue una conversione automatica (promozione).
    - se un valore contenuto in una variabile di un certo tipo deve essere assegnato ad una variabile di un tipo "meno capace", il cimpilatore non esegue una conversione perché potrebbe portare alla perdita di cifre significative. 
        - provoca un errore in compilazione
    
# Operatori Aritmetici
- L'operatore che indica la divisione è "/", quello che indica la moltiplicazione è "*"
- il punto è il separatore deciale
- non bisogna indicare il punto separatore delle migliaia
- Numeri in virgola mobile si possono indicare anche in notazione esponenziale
    [java]
    1.93E3 // vale 1.93x10^3
    [java]
- L'operatore di moltiplicazione va indicato esplicitamente, non può essere sottointeso
- Le operazioni di moltiplicazione e divisione hanno la precedenza
- è possibile usare coppie di parentesi TONDE per indicare in quale ordine valutare le sotto-espressioni
        a + b / 2 != (a + b) / 2
- In Java non esiste il simbolo di frazione, le frazioni vanno espresse inline
- le operazioni di moltiplicazione e divisione hanno la precedenza
- è possibile usare coppie di parentesi tonde per indicare l'ordine
- quando entrambi gli operandi sono interi, la divisione calcola il quoziente intero scartando il resto
        7 / 4 = 1 
        7.0/4 && 7.0/4.0 && 7/4.0 = 1.75
- il resto della divisione può essere calcolato usando "%"
        7 % 4 = 3


La classe math della libreria standard mette a disposizione metodi statii per il calcolo di tutte le funzioni algebriche e trigonometriche.
- Math.pow(x,y) restituisce x^y
- Math.sqrt(x) restituisce radice quadrata di x
- Math.log(x) restituisce logaritmo naturale di x
- Math.sin(x) restituisce il seno di x espresso in radicanti

Methodi di Math vs println:
- println agisce su un oggetto (ad esempio System.out)
    - ricordiamo che per il momento, consideriamo gli oggetti come elementi da manipolare in un programma Java
- pow non agisce su un oggetto (Math è una classe)
    - il metodo Math.pow è un metodo statico
- La sintassi è identica, ma tutte le classi, gli oggetti e i metodi della libreria standard seguono una rigida convenzione:
    - i nomi delle classi (Math, System) iniziano con una lettera maiuscola
    - i nomi di oggetti (out) e metodi (println, pow) iniziano con una lettera minuscola
        - oggetti e metodi si distinguono perché solo i metodi sono sempre seguiti dalle parentesi tonde

- public: il metodo può essere invocato in qualsiasi classe
- static: il metodo è statico
- double: tipo di dato restituito
- pow:    nome o identificatore del metodo
- double a, double b: parametri "espliciti" del ...

// -----------------------------------
[java]
    NomeClasse.nomeMetodo(parametri);
[/java]
    Scopo: invocare il metodo statico "nomeMetodo" definito nella classe "NomeClasse", fornendo gli eventuali "parametri" richiesti.
    Nota: un metodo statico non viene invocato con un oggetto, ma con un nome di classe
        - un metodo statico elabora o modifica solo i propri parametri espliciti
- Nella classe Math sono definite alcune costanti
    [java]
        public final class Math
        {
            public static final double PI = 3.141592658979323846;
            public static final double E = 2.7182818284590452354;
        }
    [/java]
- Sono costanti statiche, ovvero appartengono alla classe
- tali costanti sono di norma public e per ottenere il loro valore si usa il nome della classe seguito dal punto e dal nome della costante, Math.E, oppure Math.PI

# Combinare assegnazioni e aritmetica
- Per combinare in un singolo enunciato un'assegnazione ed un'espressione aritmetica che coinvolge la variabile a cui si assegna il risultato
    [java]
        totalEuro = totalEuro + dollars * 1.41;
    [/java]
- la via più veloce è 
    [java]
        totalEuro += dollars * 1.41;
    [/java]
- questo esiste per tutti gli operatori aritmetici
    [java]
        x = x * 2;
        x*=2;
    [/java]
# Incremento di una variabile
- L'incremento di una variabile che consiste nell'aumentarne il valore di uno
    [java]
        int counter = 0;
        counter = counter + 1;

        counter++;
    [/java]
- Funziona anche per il decremento
    [java]
        int counter = x;
        counter = counter - 1;

        counter--;
    [/java]

# Documentazione della libreria standard
- Le classi della libreria Java sono migliaia, esistono documentazioni
- L'ambiente JDK fornisce la documentazione API (Application Programming Interface) per l'utilizzo delle classi della libreria standard
- JDK inoltre fornisce:
    - tutta la documentazione per l'utilizzo delle classi della libreria standard
    - alcuni documenti in formato "tutorial" per la descrizione delle funzionalità di interi pacchetti
    - esempi di programmi ("demo")


# I pacchetti di classi (package)
- Tutte le classi della libreria standard sono raccolte in package e sono organizzate per argomento e/o finalità
- Per usare una classe di una libreria, bisogna importarla nel programma usando l'enunciato
    [java]
        import.nomePacchetto.nomeClasse;
    [/java]
- le classi System, Math e String appartengono al pacchetto java.lang
- il pacchetto java.lang viene importato automaticamente

        [java]
            import.nomePacchetto.nomeClasse;
        [/java]
        - Scopo: importare una classe da una pacchetto, per poterla utilizzare in un programma. 
        [java]
            import.nomePacchetto.*;
        [/java]
        - Scopo: importare tutte le classi di un pacchetto, per poterle utilizzare in un programma.

    ## Stili per l'importazione delle classi
    - usare un enunciato import per ogni classe importata
        [java]
            import.math.BigInteger;
            import.math.BigDecimal;
        [/java]
    - usare un enunciato import che importa tutte le classi di un pacchetto
        [java]
            import java.math.*;
        [/java]
        - non è un errore importare classi che non si usano 
        - se si usano più enunciati di questo tipo, non è più chiaro il pacchetto di appartenenza di una classe
    - non usare per nulla gli enunciati import, ma indicare sempre il nome completo delle classi utilizzate nel codice
        [java]
            java.math.BigInteger a = new java.math.BigInteger("123456789");
        [/java]
        - questo stile è poco usato
            - più errori di battitura
            - più lungo il codice
            - più noioso
            - meno leggibile

# stringhe
    - I tipi di dati più importanti nella maggior parte dei programmi sono i numeri e le stringhe
    - Una stringa è una sequenza di caratteri, che in Java (come in molti altri linguaggi) vanno racchiusi tra virgolette
    - Possiamo dichiarare e inizializzare variabili di tipo stringa
        [java]
            String name = "Giacomo";
        [/java]
    - Possiamo assegnare un valore ad una variabile di tipo stringa
        [java]
            name = "Jack";
        [/java]
    - Diversamente dai numeri, le stringhe sono oggetti
    - Una variabile di tipo stringa può quindi essere utilizzata per invocare metodi (non statici) della classe String 
        - ad esempio, il metodo length restituisce la lunghezza di uan stringa, cioè il numero di caratteri presenti in essa (senza contare le virgolette)
        [java]
            String name = "Giacomo";
            int n = name.length();
        [/java]
        - il metodo "length" della classe String !! non è un metodo statico !!
            - infatti per invocarlo usiamo un oggetto della classe String e questo significa che il metodo funziona agendo su un oggetto
            [java]
                String s = "Giacomo";
                int n = s.length(); // FUNZIONA
                
                // ----------------------
                
                String s = "Giacomo";
                int n = String.length(); // NON FUNZIONA
            [/java]
        - una stringa di lunghezza zero, che non contiene caratteri, si chiama stringa vuota e si indica con due caratteri virgolette consecutivi, senza spazi interposti.
            [java]
                String empty = "";
                System.out.println(empty.length()); // 0
            [/java]

# Estrazioni di sottostringhe
    - per estrarre una sottostringa da una stringa si usa il metodo substring
        [java]
            String greeting = "Hello, World!";
            String sub = greeting.substring(0, 4); // contiene "Hell"
        [/java]
        - il primo parametro di substring è la posizione del primo carattere che si vuole usare
        - il secondo parametro è la posizione successiva all'ultimo carattero che si vuole usare

            H E L L O ,   W O R L D !
            0 1 2 3 4 5 6 7 8 9 10 11 12

        - la posizione dei caratteri nelle stringhe viene numerata a partire da 0 anziché da 1
            - uniformità con altri linguaggi
        !NOTE: 
            - la posizione dell'ultimo carattere corrisponde alla lunghezza della stringa meno 1
            - la differenza tra due parametri di substring corrisponde alla lunghezza della sottostringa estratta
    - Il metodo substring può essere invocato anche con un solo parametro
        [java]
            String greeting = "Hello, World!";
            String sub = greeting.substring(7); // contiene "World!"
        [/java]

# Concatenazione di stringhe 
    - Per concatenare due stringhe si usa l'operatore +
        [java]
            String s1 = "li";
            String s2 = "re";
            String s3 = s1 + s2; // s3 contiene "lire"
            int lit = 15000;
            String s = lit + s3; // s contiene "15000lire"
        [/java]
    - l'operatore + non aggiunge spazi
    - per avere lo spazio bisogna aggiungerlo
        [java]
            String s1 = "li";
            String s2 = "re";
            String s3 = s1 + s2; // s3 contiene "lire"
            int lit = 15000;
            String s = lit + ' ' + s3; // s contiene "15000 lire"
        [/java]

# Metodi utili di String
    - Un problema che capita spesso di affrontare è quello della conversione di una stringa per ottenerne un'altra tutta in maiuscolo o tutto in minuscolo
    - la classe String mette a disposizione due metodi
        - toUpperCase converte tutto in maiuscolo
        - toLowerCase converte tutto in minuscolo
    
        [java]
            Strong s = "Hello";
            String ss = s.toUpperCase() + s.toLowerCase(); // vs vale "HELLOhellO"
        [/java]
    - si noti che l'applicazione di uno di questi metodi alla stirnga s non altera il contenuto della stringa s, ma restituisce una nuova stringa
    - in particolare nessun metodo della classe String modifica l'oggetto con cui viene invocato
        - si dice perciò che gli oggetti della classe String sono oggetti immutabili

# Conversione di numeri in stringhe
    - per convertire un numero in stringa si può concatenare il numero con la stringa vuota
    [java]
        int ageNumber = 10;
        String ageString = "" + ageNumber; // ageString contiene "10"
    [/java]
    - è però più elegante e comprensibile utilizzare il metodo toString delle classi Integer e Double
    [java]
        int ageNumber = 10;
        String ageString = Integer.toString(ageNumber);
    [/java]
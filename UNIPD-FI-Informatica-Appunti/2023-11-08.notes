[2023-11-08]
# Leggi di De Morgan
    - Due leggi per semplificare espressioni logiche
        - criterio per convertire un'espressione "negata" in un'espressione "affermata"
        1. Legge "!(A && B) è uguale a !A || !B"
        2. Legge "!(A !! B) è uguale a !A && !B"
        - gli operatori not vengono spostati sulle singole variabili
        - gli operatori AND e OR vengono scambiati
        [java]
            if (!(x < 0 || x > 10)) {}
            if ( x>=0 && x<=10) {}
        [/java]

# Iterazioni (while loops)
    - L'enunciato "while" consente la realizzazione di programmi che devono "eseguire ripetutamente" una serie di azioni "finché" è verificata una condizione 
    - Sintassi:
        [java]
            while (condizione)
            {
                enunciato
            }
        [/java]
    - Scopo: eseguire un enunciato finché la condizione è verificata
    - Nota: il corpo del ciclo while può essere un enunciato qualsiasi, quindi anche un blocco di enunciati
    - Esistono errori logici che impediscono la terminazione di un ciclo, generando un ciclo infinito
    - l'esecuzione del seguente programma continua ininterrottamente
    [java]
        int year = 0;
        while (year < 20)
        {
            double interest 0 balance * rate / 100;
            balance = balance + interest;

            // qui manca year++, quindi il ciclo continua infinitamente
        }
    [/java]
    - in questo caso bisogna arrestare il programma con un comando del sistema operativo o addirittura riavviare il computer

# Cicli for
    - generalmente, molti cicli hanno la seguente forma
        [java]

            i = inizio;
            while (i < fine)
            {
                enunciati();
                i++;
            }

        [/java]
    - per comodità esiste il ciclo "for" equivalente
        [java]

            for (i = inizio; i < fine; i++)
            {
                enunciati();
            }

        [/java]
    - non è necessario che l'incremento sia di una sola unità, ne che sia positivo, ne che sia intero.
    - Sintassi:
        [java]

            for (inizializzazione; condizione; aggiornamento)
            {
                enunciati
            }

        [/java]
    - Scopo: eseguire un'inizializzazione, poi ripetere l'esecuzione di un enunciato ed effettuare un aggiornamento finché la condizione è vera. 
    - Nota: l'inizializzazione può contenere la definizione di una variabile, che sarà visibile soltanto all'interno del corpo del ciclo
        [java]

            for (int y = 1; y <= 10; y++)
            {
                ...
            }
            // qui y non è più definita

        [/java]
        